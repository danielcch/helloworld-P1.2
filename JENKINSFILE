pipeline {
    agent any

    options { skipDefaultCheckout() }

    stages {
        stage('Get Code') {
            steps {
                checkout scm
                echo WORKSPACE
                sh 'ls -la'
                stash name:'code', includes:'**'
            }
        }
    
        stage('Build') {
           steps {
              echo 'Eyyy, esto es Python. No hay que compilar nada!!!'
           }
        }

        stage('Unit Tests') {
            steps {
                unstash 'code'
                sh '''
                    export PYTHONPATH=$PYTHONPATH:$(pwd)
                    python -m pytest --junitxml=unit-results.xml test/unit/
                '''
                stash name:'unit-res', includes:'unit-results.xml'
            }
        }

        stage ('Results') {
            steps {
                junit '*result*.xml'
            }
        }    

        stage('Coverage') {
            steps {
                unstash 'code'
                sh '''
                    export PYTHONPATH=$PYTHONPATH:$(pwd)
                    python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                    python3 -m coverage xml
                '''
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,0,80', lineCoverageTargets: '100,0,90'
                }
                
                stash name:'coverage-res', includes:'coverage.xml'
            }
        }

        stage('Static') {
            steps {
                sh '''
                    python3 -m flake8 --exit-zero --format=pylint app > flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], 
                qualityGates: [[threshold:10, type: 'TOTAL', unstable: true], 
                [threshold: 11, type: 'TOTAL', unstable: false]]
                }
        }

        stage('Security') {
            steps{
                sh '''
                    python3 -m bandit -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}" || true
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], 
                qualityGates: [[threshold:1, type: 'TOTAL', unstable: true], 
                [threshold: 2, type: 'TOTAL', unstable: false]]
    
            }
        }

        stage('Performance') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                            echo "Usuario: $(whoami)"
                            echo "Host: $(hostname)"
                            echo "Workspace: $WORKSPACE"

                            export PYTHONPATH=.
                            export FLASK_APP=app/api.py:api_application
                            PORT_FLASK=5000
                            
                            # Inicia Flask

                            flask run --port=5000 &

                            FLASK_PID=$!
                            trap "kill $FLASK_PID || true" EXIT

                            echo "Esperando a que Flask esté listo en http://localhost:5000/ ..."
                            timeout 120 bash -c 'until curl -sf http://localhost:5000/ > /dev/null; do sleep 2; done'
                            sleep 2  # Opcional: da un pequeño margen por si tarda

                            jmeter -n -t ./test/jmeter/flask.jmx -l flask.jtl
                            sleep 10
                        '''
                }
                    perfReport sourceDataFiles: 'flask.jtl'

            }
        }
    }
}
